# ruff: noqa
# black: skip
# mypy: ignore-errors

from typing import Optional, List

from .multilang_prompt import (
    MultiLangContainer, 
    MultiLangPromptTemplateCollection, 
    PromptList,
    ContextConfig,
    ModeConfig,
)


class PromptFactory:
    # NOTE: This class is auto-generated by gen_prompt_factory.py

    def __init__(self, lang_shortcode: str = "en", fallback_mode=MultiLangContainer.FallbackMode.EXCEPTION):
        self.lang_shortcode = lang_shortcode
        self.collection = MultiLangPromptTemplateCollection()
        self.fallback_mode = fallback_mode
        self.context: Optional[ContextConfig] = None
        self.modes: List[ModeConfig] = []

    def _format_prompt(self, prompt_name: str, kwargs) -> str:
        del kwargs["self"]
        mpt = self.collection.get_multilang_prompt_template(prompt_name)
        return mpt.get_item(self.lang_shortcode, self.fallback_mode).instantiate(**kwargs)

    def _get_list(self, prompt_name: str) -> PromptList:
        mpl = self.collection.get_multilang_prompt_list(prompt_name)
        return mpl.get_item(self.lang_shortcode, self.fallback_mode)
        
    def set_context(self, context_name_or_path: Optional[str]) -> None:
        """
        Set the current context.

        :param context_name_or_path: Name of a built-in context, path to a YAML file, or None to clear
        """
        if context_name_or_path is None:
            self.context = None
        else:
            self.context = self.collection.get_context(context_name_or_path)

    def set_modes(self, mode_names_or_paths: List[str]) -> None:
        """
        Set the current modes.

        :param mode_names_or_paths: List of built-in mode names or paths to YAML files
        """
        self.modes = []
        for mode in mode_names_or_paths:
            self.modes.append(self.collection.get_mode(mode))

    def get_context_and_modes_excluded_tools(self) -> List[str]:
        """
        Get the combined list of excluded tools from the current context and modes.

        :return: List of tool names to exclude
        """
        excluded_tools = []
        if self.context:
            excluded_tools.extend(self.context.excluded_tools)

        # Collect all excluded tools from modes
        for mode in self.modes:
            excluded_tools.extend(mode.excluded_tools)

        return list(set(excluded_tools))  # Deduplicate
        

    # methods
